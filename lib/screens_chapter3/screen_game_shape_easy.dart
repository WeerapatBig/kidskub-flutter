import 'dart:async';
import 'dart:math';
import 'package:firstly/function/mediaquery_values.dart';
import 'package:firstly/screens/shared_prefs_service.dart';
import 'package:firstly/widgets/star_congrate.dart';
import 'package:flutter/material.dart';

import '../widgets/custom_button.dart';
import '../widgets/progressbar_lineeasy.dart';
import '../widgets/result_widget.dart';
import 'game_mechanic/shape_game_controller.dart';
import 'data/level_easy_data.dart';
import 'model/level_shape_data.dart';
import 'model/shape_model.dart';
import 'model/silhouette_item.dart';

enum ButtonState { none, correct, incorrect }

class GameShapeEasyScreen extends StatefulWidget {
  // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á ‚Äú‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‚Äù ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

  const GameShapeEasyScreen({Key? key}) : super(key: key);

  @override
  State<GameShapeEasyScreen> createState() => _GameShapeEasyScreenState();
}

class _GameShapeEasyScreenState extends State<GameShapeEasyScreen>
    with TickerProviderStateMixin {
  final List<LevelShapeData> allLevels = LevelEasyData.allLevels;
  int _currentLevelIndex = 0; // ‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  late ShapeGameController _gameController;
  late ValueNotifier<int> _timeNotifier;
  final prefsService = SharedPrefsService();

  Timer? _timer; // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö Timer ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö State
  final Map<String, ButtonState> _buttonStates = {};

  bool showTutorial = false;
  bool showResult = false;
  bool isWin = false;
  bool _isStartingNewGame = false;

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Widget "3 2 1 Go"
  bool showCountdown = false;
  late AnimationController _countdownAnimationController;
  late Animation<double> _countdownAnimation;
  int _currentCountdown = 3;
  int earnedStars = 0; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô

  bool _isLevelTransitioning = false; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö State

  @override
  void initState() {
    super.initState();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß Controller game
    _gameController = ShapeGameController();
    earnedStars = _gameController.calculateStars(); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Countdown
    _countdownAnimationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    );

    _countdownAnimation = Tween<double>(begin: 1.5, end: 1.0)
        .chain(CurveTween(curve: Curves.bounceOut))
        .animate(_countdownAnimationController);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏° Flow ‡πÄ‡∏Å‡∏° (Tutorial -> Countdown -> ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°)
    _startGameFlow();
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° Flow ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
  void _startGameFlow() {
    _isStartingNewGame = true; // üí° ‡∏ï‡∏±‡πâ‡∏á‡∏ò‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
    _startNewGameFlow();
  }

  /// (B) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î Tutorial -> ‡πÄ‡∏£‡∏¥‡πà‡∏° Countdown
  void _onCloseTutorial() {
    setState(() {
      showTutorial = false;
    });

    if (_isStartingNewGame) {
      showCountdown = true;
      _startCountDown(); // ‚úÖ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ Countdown
      _isStartingNewGame = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ò‡∏á
    } else {
      _resumeTimer(); // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£ pause ‡πÅ‡∏•‡πâ‡∏ß resume ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    }
  }

  /// (C) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á 3..2..1..Go
  /// ‡∏û‡∏≠‡∏à‡∏ö -> initLevel(0)
  void _startCountDown() {
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    _currentCountdown = 3;

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_currentCountdown > 0) {
        _countdownAnimationController.forward(from: 0.0);
        setState(() {
          _currentCountdown--;
        });
      } else {
        timer.cancel();
        setState(() {
          showCountdown = false;
        });
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö countdown -> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡πÅ‡∏£‡∏Å
        _initLevel(_currentLevelIndex);
        _startTimer(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
      }
    });
  }

  void _startNewGameFlow() {
    setState(() {
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πà‡∏≤‡∏á ‡πÜ
      _timer?.cancel();
      _buttonStates.clear();
      _currentLevelIndex = 0;
      isWin = false;
      showResult = false;

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï GameController ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
      _gameController
          .reset(); // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î reset() ‡πÉ‡∏ô ShapeGameController

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
      _timeNotifier = ValueNotifier<int>(120);
      _gameController.remainingTime = 120;

      // ‡πÄ‡∏õ‡∏¥‡∏î Tutorial
      showTutorial = true;
      showCountdown = false;
      _currentCountdown = 3;
    });
  }

  void _pauseTimer() {
    _timer?.cancel();
  }

  void _resumeTimer() {
    _startTimer();
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ï‡∏≤‡∏° index
  void _initLevel(int levelIndex) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏¢‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß -> ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏ß‡πà‡∏≤‡∏à‡∏ö‡πÄ‡∏Å‡∏°
    if (levelIndex >= allLevels.length) {
      _timer?.cancel();
      isWin = true;
      showResult = true;
      showStarCongrate = true;
      return;
    }
    showStarCongrate = false;
    final levelData = allLevels[levelIndex];
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å controller ‡πÉ‡∏´‡πâ load silhouettes + options ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ô‡∏µ‡πâ
    _gameController.startLevel(levelData);

    // ‡∏ú‡∏π‡∏Å ProgressBar
    _timeNotifier = ValueNotifier<int>(_gameController.remainingTime);

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    _startTimer();
  }

  void _startTimer() {
    _timer?.cancel();
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Timer ‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      _gameController.decrementTime();
      _timeNotifier.value = _gameController.remainingTime;

      if (_gameController.remainingTime <= 0) {
        timer.cancel();
        isWin = false;
        showResult = true;
        setState(() {});
      }
    });
  }

  void _onAnswerChosen(ShapeModel chosen) {
    bool isCorrect = _gameController.checkAnswer(chosen);

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î + ‡∏Å‡∏î‡∏ú‡∏¥‡∏î => ‡∏´‡∏±‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
    if (!_gameController.revealedShapes.contains(chosen.name) && !isCorrect) {
      _gameController.penaltyTime(5);
    }

    setState(() {
      if (isCorrect) {
        _buttonStates[chosen.name] = ButtonState.correct;

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏ú‡∏¢‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (_gameController.isAllRevealed && !_isLevelTransitioning) {
          _isLevelTransitioning = true;

          showStarCongrate = true;

          _pauseTimer();

          // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå
          Future.delayed(const Duration(milliseconds: 2500), () {
            setState(() {
              _buttonStates.clear();
            });
          });

          // ‡∏£‡∏≠ 1.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ -> ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          Future.delayed(const Duration(milliseconds: 3500), () {
            _goNextLevel();
          });
        }
      } else {
        // ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î -> incorrect 1.5 ‡∏ß‡∏¥
        _buttonStates[chosen.name] = ButtonState.incorrect;
        Future.delayed(const Duration(milliseconds: 1200), () {
          if (!mounted) return;
          if (_buttonStates[chosen.name] == ButtonState.incorrect) {
            setState(() {
              _buttonStates[chosen.name] = ButtonState.none;
            });
          }
        });
      }
    });
  }

  /// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  void _goNextLevel() {
    setState(() {
      _isLevelTransitioning = false;
      _buttonStates.clear(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      _currentLevelIndex++;
      _initLevel(_currentLevelIndex);
      _resumeTimer();
    });
  }

  //‡∏£‡∏µ‡πÄ‡∏ã‡πâ‡∏ï‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  void _resetGame() {
    _startGameFlow();
  }

  @override
  void dispose() {
    _timer?.cancel(); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    _countdownAnimationController.dispose();
    super.dispose();
  }

  /// ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á Widget Silhouette
  Widget _buildSilhouetteArea() {
    final silhouettes = _gameController.currentSilhouettes;
    final screenW = context.screenWidth;
    final screenH = context.screenHeight;

    List<Widget> silhouetteWidgets = [];

    for (int i = 0; i < _gameController.currentSilhouettes.length; i++) {
      final random = Random();

      // Ramdom ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      double startX = random.nextDouble() * (screenW * 0.4);
      double startY = random.nextDouble() * (screenH * 0.4);

      double vx = 150 + random.nextDouble() * 200;
      double vy = 150 + random.nextDouble() * 200;
      if (random.nextBool()) vx = -vx;
      if (random.nextBool()) vy = -vy;

      silhouetteWidgets.add(
        SilhouetteItem(
          gameController: _gameController,
          shape: silhouettes[i],
          // ‡πÅ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          initialX: startX,
          initialY: startY,
          itemSize: 120.0,
          rotationSpeed: 0.5 * pi, // ‡∏´‡∏°‡∏∏‡∏ô 360 ‡∏≠‡∏á‡∏®‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        ),
      );
    }

    // ‡πÉ‡∏™‡πà Stack + ClipRect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    return Positioned(
      top: MediaQuery.of(context).size.height * 0.1,
      left: 0,
      right: 0,
      child: Center(
        child: Stack(
          children: [
            // ‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á
            Center(
              child: SizedBox(
                width: context.screenWidth * 0.6,
                height: context.screenHeight * 0.5,
                child: Image.asset(
                  "assets/images/shapegame/BG_shape_game.png",
                  fit: BoxFit.contain,
                ),
              ),
            ),
            // ClipRect + Stack ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≠‡∏¢
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SilhouetteAnimationArea
            // ClipRect + Stack ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≠‡∏¢
            Padding(
              padding: EdgeInsets.only(
                  left: context.screenWidth * 0.275,
                  top: context.screenHeight * 0.015,
                  right: context.screenWidth * 0.275),
              child: SizedBox(
                width: context.screenWidth * 0.45,
                height: context.screenWidth * 0.28,
                child: ClipRect(
                  child: Stack(
                    children: silhouetteWidgets,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

// -----------------------------
  // ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  // -----------------------------
  Widget _buildOptions() {
    //if (_currentLevelIndex >= allLevels.length) return SizedBox.shrink();

    final options = _gameController.currentOptions;

    // ‡∏ß‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ ‡πÜ ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á 20%
    return Positioned(
      bottom: context.screenHeight * 0.25,
      left: 0,
      right: 0,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: options.map((shape) {
          return _buildOptionButton(shape);
        }).toList(),
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Option) ‡πÄ‡∏õ‡πá‡∏ô Stack ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏ô Overlay
  Widget _buildOptionButton(ShapeModel shape) {
    final ButtonState state = _buttonStates[shape.name] ?? ButtonState.none;

    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ correct:
    final bool isAnsweredCorrect = (state == ButtonState.correct);

    return CustomButton(
      onTap: isAnsweredCorrect ? null : () => _onAnswerChosen(shape),
      child: Stack(
        alignment: Alignment.center,
        children: [
          // ‡∏ä‡∏±‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á: ‡∏Å‡∏•‡πà‡∏≠‡∏á + ‡∏£‡∏π‡∏õ
          Container(
            width: context.screenWidth * 0.1,
            height: context.screenHeight * 0.15,
            margin: EdgeInsets.fromLTRB(10, 0, 10, 0),
            child: Image.asset(
              shape.imagePath,
              fit: BoxFit.contain,
            ),
          ),
          Container(
            width: context.screenWidth * 0.095,
            height: context.screenHeight * 0.15,
            decoration: BoxDecoration(
              color: isAnsweredCorrect
                  ? Colors.white.withOpacity(0.8)
                  : Colors.transparent,
              borderRadius: BorderRadius.circular(24),
            ),
            child: AnimatedSwitcher(
              duration: const Duration(milliseconds: 300), // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
              switchInCurve: Curves.bounceInOut,
              switchOutCurve: Curves.elasticOut,
              transitionBuilder: (child, animation) {
                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô: ‡πÄ‡∏ä‡πà‡∏ô ScaleTransition ‡∏´‡∏£‡∏∑‡∏≠ FadeTransition
                return FadeTransition(
                  opacity: animation,
                  child: ScaleTransition(
                    scale: animation,
                    child: child,
                  ),
                );
              },
              // child = widget ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° state
              child: _buildStateIcon(state),
            ),
          ),
        ],
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏° state
  Widget _buildStateIcon(ButtonState state) {
    switch (state) {
      case ButtonState.correct:
        return Image.asset(
          "assets/images/shapegame/check.png",
          width: 80,
          height: 80,
          fit: BoxFit.contain,
          key: const ValueKey('correct'), // ‡πÉ‡∏™‡πà key ‡πÉ‡∏´‡πâ AnimatedSwitcher ‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ
        );
      case ButtonState.incorrect:
        return Image.asset(
          "assets/images/shapegame/cross.png",
          width: 80,
          height: 80,
          fit: BoxFit.contain,
          key: const ValueKey('incorrect'),
        );
      default:
        // none => ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
        return const SizedBox(
          key: ValueKey('none'),
        );
    }
  }

  Widget _buildCountdownWidget() {
    // Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Countdown
    return Container(
      color: Colors.black.withOpacity(0.5),
      child: Center(
        child: ScaleTransition(
          scale: _countdownAnimation,
          child: Text(
            _currentCountdown > 0 ? '$_currentCountdown' : 'Go!',
            style: TextStyle(
              fontSize: 300,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ProgressBar (‡∏ö‡∏ô‡∏™‡∏∏‡∏î)
  Widget _buildProgressBar() {
    return ProgressBarLineEasyWidget(
      remainingTime: _timeNotifier,
      maxTime: _gameController.maxTime,
      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á -> ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏Å‡∏µ‡πà‡∏î‡∏ß‡∏á ‡∏≠‡∏≤‡∏à‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ProgressBarLineEasyWidget ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≤‡∏ß‡∏Å‡πá‡πÑ‡∏î‡πâ
      starCount: 3,
    );
  }

  Widget _buildTutorialWidget() {
    // Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Tutorial
    return GestureDetector(
      onTap: () {
        _onCloseTutorial();
      },
      child: Container(
        width: MediaQuery.of(context).size.width * 1,
        color: Colors.black.withOpacity(0.6),
        child: Center(
          child: SizedBox(
            width: MediaQuery.of(context).size.width * 0.5,
            height: MediaQuery.of(context).size.height * 0.7,
            child: Column(
              children: [
                Container(
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0),
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0),
                        blurRadius: 10,
                        offset: const Offset(0, 4),
                      ),
                    ],
                  ),
                  padding: const EdgeInsets.all(10),
                  child: Image.asset(
                    'assets/images/shapegame/tutorial_shape_easy.gif', // ‡πÅ‡∏Å‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô
                    fit: BoxFit.contain,
                  ),
                ),
                const SizedBox(height: 20),
                const Text(
                  '‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠',
                  style: TextStyle(
                    fontSize: 50,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildExitPopUp(BuildContext context) {
    double imageWidth = context.screenWidth;
    double imageHeight = context.screenHeight;

    return Container(
      //‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
      color: Colors.black.withOpacity(0.5),
      child: AlertDialog(
        backgroundColor: Colors.transparent, // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        content: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å
            GestureDetector(
              onTap: () {
                Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î popup
                Navigator.of(context).pop(); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
              },
              child: Image.asset('assets/images/linegamelist/exit_button.png',
                  width: imageWidth * 0.28, height: imageHeight * 0.48),
            ),
            SizedBox(width: imageWidth * 0.02),
            // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠
            GestureDetector(
              onTap: () {
                Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î popup
              },
              child: Image.asset('assets/images/linegamelist/resume_button.png',
                  width: imageWidth * 0.2, height: imageHeight * 0.2),
            ),
          ],
        ),
      ),
    );
  }

  bool showStarCongrate = false;

  @override
  Widget build(BuildContext context) {
    // ‡πÉ‡∏ä‡πâ Stack ‡∏ß‡∏≤‡∏á ProgressBar ‡∏ö‡∏ô‡∏™‡∏∏‡∏î, Silhouette ‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠, ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á, ‡πÅ‡∏•‡∏∞ Overlay check/cross
    return Scaffold(
      body: Stack(
        children: [
          // ================== ‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á ==================
          Positioned.fill(
            child: Image.asset(
              'assets/images/shapegame/grid_green.png',
              fit: BoxFit.cover,
            ),
          ),

          // ================== ‡πÄ‡∏Å‡∏° ==================

          _buildProgressBar(),
          if (showStarCongrate)
            AnimatedOpacity(
                opacity: showStarCongrate ? 1.0 : 0.0,
                duration: Duration(milliseconds: 3000),
                child: StarCongrate()),
          _buildSilhouetteArea(),
          _buildOptions(),

          // =========== Exit Button =================
          Positioned(
            top: context.screenSize.height * 0.05,
            right: context.screenSize.width * 0.04,
            child: CustomButton(
              onTap: () {
                showDialog(
                  context: context,
                  barrierDismissible: true,
                  builder: (BuildContext context) => _buildExitPopUp(context),
                );
              },
              child: Image.asset(
                'assets/images/close_button.png',
                width: context.screenSize.width * 0.060,
              ),
            ),
          ),

          // ‡∏õ‡∏∏‡πà‡∏° Info ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î TutorialWidget
          Positioned(
            bottom: context.screenSize.height * 0.05,
            right: context.screenSize.width * 0.04,
            child: CustomButton(
              onTap: () {
                setState(() {
                  _pauseTimer(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Tutorial
                  showTutorial = true;
                });
              },
              child: Image.asset(
                'assets/images/HintButton.png',
                width: context.screenSize.width * 0.060,
              ),
            ),
          ),

          //============= Tutorial ================
          if (showTutorial)
            AnimatedOpacity(
              opacity: showTutorial ? 1.0 : 0.0,
              duration: Duration(milliseconds: 1000),
              child: _buildTutorialWidget(),
            ),

          // ----- ‡∏ñ‡πâ‡∏≤ showResult => ‡πÅ‡∏™‡∏î‡∏á ResultWidget
          if (showResult && isWin)
            ResultWidget(
              onLevelComplete: isWin, // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
              starsEarned: _gameController.calculateStars(),
              onButton1Pressed: () {
                setState(() {
                  _resetGame();
                });
              },
              onButton2Pressed: () {
                _finishGame();
              },
            ),
          if (showResult && !isWin)
            ResultWidget(
              onLevelComplete: isWin, // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
              starsEarned: 0,
              onButton1Pressed: () {
                _finishGame();
              },
              onButton2Pressed: () {
                setState(() {
                  _resetGame();
                });
              },
            ),

          if (showCountdown) _buildCountdownWidget(),
        ],
      ),
    );
  }

  void _finishGame() async {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    await prefsService.saveLevelData('Shape Easy', earnedStars, 'yellow', true);

// ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏î‡πà‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    await prefsService.updateLevelUnlockStatus('Shape Easy', 'Shape Hard');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    final result = await prefsService.loadLevelData('Shape Easy');
    print("Saved Level Data: $result");

    // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°
    Navigator.pop(context);
  }
}
