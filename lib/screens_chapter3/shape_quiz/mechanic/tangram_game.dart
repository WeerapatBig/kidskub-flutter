// lib/mechanic/tangram_game.dart

import 'dart:ui';

import 'package:flame/camera.dart';
import 'package:flame/components.dart';
import 'package:flame/effects.dart';
import 'package:flame/game.dart';
import 'package:flutter/material.dart';

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
import '../data/tangram_level_data.dart';
import '../model/pieces_menu.dart';
import 'black_silhouette.dart';
import 'player_data.dart';
//import 'draggable_shape.dart';

/// TangramGame ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å FlameGame
/// ‡πÅ‡∏•‡∏∞‡∏ú‡∏™‡∏° HasDraggables ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ event drag ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Component ‡∏ó‡∏µ‡πà implement DragCallbacks
class TangramGame extends FlameGame {
  Function()? onLevelComplete; // Callback
  Function()? onGameOver; // Callback
  Function()? onAllLevelComplete; // Callback
  final TangramLevelData levelData;

  final PlayerDataManager playerData;
  Function(int currentHP)? onHPChanged;

  late BlackSilhouette blackSilhouette;
  late SpriteComponent background;
  late SpriteComponent checkMark;
  bool checkMarkAdded = false;

  int snappedCount = 0;
  TangramGame(this.levelData, this.playerData);

  @override
  Future<void> onLoad() async {
    super.onLoad();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á CameraComponent ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö ScalingViewport
    final cameraComponent = CameraComponent.withFixedResolution(
      width: 1250, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
      height: 740, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
    );

    camera = cameraComponent; // ‚úÖ ‡πÉ‡∏ä‡πâ CameraComponent ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà camera.viewport
    add(cameraComponent);

    // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    final bgSprite = await loadSprite('linegamelist/line_quiz/paper_bg.png');
    background = SpriteComponent()
      ..sprite = bgSprite
      ..size = size // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      ..priority = 0; // **‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î**
    add(background);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á BlackSilhouette (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Silhouette Sprite ‡∏Å‡πá‡πÑ‡∏î‡πâ)
    blackSilhouette = BlackSilhouette(
      position: levelData.silhouettePosition,
      size: levelData.silhouetteSize,
      targetSlots: levelData.targetSlots,
      spritePath: levelData.silhouetteImagePath, // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏õ‡∏£‡∏ó‡πå Silhouette
    );
    add(blackSilhouette);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PiecesMenu
    final menu = PiecesMenu(
      position: levelData.menuPosition, // ‡πÄ‡∏ä‡πà‡∏ô‡πÅ‡∏õ‡∏∞‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
      size: levelData.menuSize,
      shapeList: levelData.pieces,
      bgSpritePath: levelData.menuBgSpritePath,
      priority: 15, // <-- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏¥‡πâ‡∏ô‡∏à‡∏≤‡∏Å LevelData
    );
    add(menu);

    final checkSprite = await loadSprite('shapegame/check.png');
    checkMark = SpriteComponent()
      ..sprite = checkSprite
      ..size = Vector2(356 * 0.85, 284 * 0.85) // ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      ..anchor = Anchor.center
      // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á = ‡∏à‡∏∏‡∏î Silhouette + ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á size => ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
      ..position = blackSilhouette.position + (blackSilhouette.size / 2)
      ..priority = 16; // ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î
  }

  void doBounce(PositionComponent target) {
    final scaleUpDown = SequenceEffect([
      ScaleEffect.to(
        Vector2(0.2, 0.2),
        EffectController(duration: 0.06),
      ),
      ScaleEffect.to(
        Vector2(1.3, 1.3),
        EffectController(duration: 0.06),
      ),
      ScaleEffect.to(
        Vector2(1.0, 1.0),
        EffectController(duration: 0.06),
      ),
      ScaleEffect.to(
        Vector2(1.1, 1.1),
        EffectController(duration: 0.06),
      ),
    ]);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° effect ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß target
    target.add(scaleUpDown);
  }

  void showCheckMark() {
    if (!checkMarkAdded) {
      add(checkMark);
      checkMarkAdded = true;
      doBounce(checkMark);
    }
  }

  void hideCheckMark() {
    if (checkMarkAdded) {
      remove(checkMark);
      checkMarkAdded = false;
    }
  }

  void loseHeart() {
    playerData.loseHeart();
    // ‡∏ö‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Screen ‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß
    onHPChanged?.call(playerData.hearts);

    // ‡∏ñ‡πâ‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏°‡∏î ‡∏≠‡∏≤‡∏à‡∏à‡∏ö‡πÄ‡∏Å‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (playerData.hearts <= 0) {
      print("Game Over!");
      // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô logic ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ
      onGameOver!();
    }
  }

  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏î snap ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  void onShapeSnapped() {
    snappedCount++;
    // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Snap == ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÉ‡∏ô levelData => ‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏ö
    if (snappedCount == levelData.pieces.length) {
      Future.delayed(Duration(milliseconds: 500), () {
        showCheckMark();
        Future.delayed(const Duration(seconds: 1), () {
          _loadNextLevelOrFinish();
          hideCheckMark();
        });
      });
    }
  }

  void _loadNextLevelOrFinish() {
    // 1) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏≤‡∏ô
    TangramLevelManager.currentLevelIndex++;

    // 2) ‡∏ñ‡πâ‡∏≤‡∏î‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏•‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ => ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
    if (TangramLevelManager.currentLevelIndex >=
        TangramLevelManager.allLevels.length) {
      if (onAllLevelComplete != null) {
        onAllLevelComplete!();
      }
      // user ‡∏ä‡∏ô‡∏∞ -> ‡∏≠‡∏≤‡∏à‡πÇ‡∏ä‡∏ß‡πå Overlay / Navigator.push
      print("All levels completed! You win!");
      // game over...
    } else {
      print("üÜï Next Level: ${TangramLevelManager.currentLevelIndex}");
      if (onLevelComplete != null) {
        onLevelComplete!(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState ‡∏ó‡∏µ‡πà State
      }
    }
  }

  @override
  void render(Canvas canvas) {
    canvas.drawColor(Colors.white, BlendMode.srcOver); // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß
    super.render(canvas);
  }
}
