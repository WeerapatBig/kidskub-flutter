// lib/screens_chapter4/components/grid.dart
import 'package:flame/components.dart';
import 'package:flutter/material.dart';

/// ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Grid (N x N) ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Tile
const int kGridWidth = 7; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏°‡∏µ 7 ‡∏ä‡πà‡∏≠‡∏á
const int kGridHeight = 5; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏°‡∏µ 5 ‡∏ä‡πà‡∏≠‡∏á
const double kTileSize = 85.0;
const double kTileRadius = 15.0; // ‚úÖ ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
const double kWhiteTileMargin = 10.0; // ‚úÖ ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î 10 ‡∏´‡∏ô‡πà‡∏ß‡∏¢

const double kGridOffsetX = 280.0; // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
const double kGridOffsetY = 155.0; // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á

/// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ gridPosition ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
bool isInsideGrid(Vector2 gridPos) {
  return (gridPos.x >= 0 &&
      gridPos.y >= 0 &&
      gridPos.x < kGridWidth &&
      gridPos.y < kGridHeight);
}

/// ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô Grid ‚Üí ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏à‡∏≠ (‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Tile)
Vector2 toPixelCenter(Vector2 gridPos) {
  return Vector2(
    (gridPos.x * kTileSize) + (kTileSize / 2) + kGridOffsetX,
    (gridPos.y * kTileSize) + (kTileSize / 2) + kGridOffsetY,
  );
}

/// ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô Grid ‚Üí ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏à‡∏≠ (‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Tile)
Vector2 toPixelTopLeft(Vector2 gridPos) {
  return Vector2(
    (gridPos.x * kTileSize) + kGridOffsetX,
    (gridPos.y * kTileSize) + kGridOffsetY,
  );
}

class GameGrid extends PositionComponent {
  /// grid[x][y] ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏≠‡∏≤‡∏ó‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÑ‡∏î‡πâ
  final List<List<int>> grid;

  GameGrid()
      : grid = List.generate(
          kGridWidth,
          (_) => List.generate(kGridHeight, (_) => 0),
        ) {
    size = Vector2(kGridWidth * kTileSize, kGridHeight * kTileSize);
    position = Vector2.zero();
    priority = 0; // ‚úÖ ‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
  }

  @override
  void render(Canvas canvas) {
    super.render(canvas);

    const backgroundWidth = kGridWidth * kTileSize;
    const backgroundHeight = kGridHeight * kTileSize;

    // üî• ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á Grid
    final backgroundPaint = Paint()
      ..color = const Color.fromARGB(255, 255, 255, 255); // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
    final backgroundStrokePaint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.stroke
      ..strokeWidth = 5.0
      ..strokeCap = StrokeCap.round
      ..strokeJoin = StrokeJoin.round;
    final outerRect = RRect.fromRectAndRadius(
      const Rect.fromLTWH(kGridOffsetX - 5, kGridOffsetY - 5,
          backgroundWidth + 10, backgroundHeight + 10),
      const Radius.circular(kTileRadius), // ‚úÖ ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
    );

    canvas.drawRRect(outerRect, backgroundPaint);
    canvas.drawRRect(outerRect, backgroundStrokePaint);

    // üî• ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    final startTilePaint = Paint()
      ..color =
          const Color.fromARGB(255, 235, 233, 236); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡πÄ‡∏ß‡∏•

    // ‡∏ß‡∏≤‡∏î Tile ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
    final tilePaint = Paint()
      ..color = const Color.fromRGBO(235, 233, 236, 1)
      ..style = PaintingStyle.fill;

    // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Tile ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Grid -10
    const whiteTileSize = kTileSize - kWhiteTileMargin;

    for (int x = 0; x < kGridWidth; x++) {
      for (int y = 0; y < kGridHeight; y++) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Tile (‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)
        final topLeft = toPixelTopLeft(Vector2(x.toDouble(), y.toDouble())) +
            Vector2(
              (kTileSize - whiteTileSize) / 2,
              (kTileSize - whiteTileSize) / 2,
            );

        // üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Å‡∏£‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Player
        final isStartTile = (x == 3 && y == 2); // ‚úÖ ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (3, 2)
        final paint = isStartTile ? startTilePaint : tilePaint;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á RRect (‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô)
        final rect = RRect.fromRectAndRadius(
          Rect.fromLTWH(topLeft.x, topLeft.y, whiteTileSize, whiteTileSize),
          Radius.circular(kTileRadius), // ‚úÖ ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
        );

        // ‡∏ß‡∏≤‡∏î Tile
        canvas.drawRRect(rect, paint);

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô => ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á 4
        if (isStartTile) {
          _drawCornerArcs(canvas, rect);
        }
      }
    }
  }

  /// ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß L ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á 4 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ arcToPoint + dashed
  void _drawCornerArcs(Canvas canvas, RRect rect) {
    final dashPaint = Paint()
      ..color = const Color.fromARGB(255, 217, 217, 217)
      ..strokeWidth = 6
      ..style = PaintingStyle.stroke
      ..strokeCap = StrokeCap.round
      ..strokeJoin = StrokeJoin.round;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô (‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏Ñ‡πâ‡∏á)
    const double cornerLength = 20;
    // ‡πÉ‡∏ä‡πâ kTileRadius ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏á
    final cornerRadius = kTileRadius;

    // -------------------------------
    // ‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å bottom -> arc -> right
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
    final topLeftPath = Path()
      ..moveTo(rect.left, rect.top + cornerLength)
      // ‡∏•‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° arc
      ..lineTo(rect.left, rect.top + cornerRadius)
      // arcFrom: current (rect.left, rect.top+cornerRadius)
      // arcTo:   (rect.left + cornerRadius, rect.top)
      ..arcToPoint(
        Offset(rect.left + cornerRadius, rect.top),
        radius: Radius.circular(cornerRadius),
        clockwise: true, // ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏° (‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
      )
      // ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤
      ..lineTo(rect.left + cornerLength, rect.top);
    _drawDashedPath(canvas, topLeftPath, dashPaint);

    // -------------------------------
    // ‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤
    final topRightPath = Path()
      ..moveTo(rect.right - cornerLength, rect.top)
      // ‡∏•‡∏≤‡∏Å‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° arc
      ..lineTo(rect.right - cornerRadius, rect.top)
      // arcToPoint -> (rect.right, rect.top+cornerRadius)
      ..arcToPoint(
        Offset(rect.right, rect.top + cornerRadius),
        radius: Radius.circular(cornerRadius),
        clockwise: true,
      )
      // ‡∏•‡∏≤‡∏Å‡∏•‡∏á
      ..lineTo(rect.right, rect.top + cornerLength);
    _drawDashedPath(canvas, topRightPath, dashPaint);

    // -------------------------------
    // ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢
    final bottomLeftPath = Path()
      ..moveTo(rect.left, rect.bottom - cornerLength)
      // ‡∏•‡∏≤‡∏Å‡∏•‡∏á‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞ arc
      ..lineTo(rect.left, rect.bottom - cornerRadius)
      ..arcToPoint(
        Offset(rect.left + cornerRadius, rect.bottom),
        radius: Radius.circular(cornerRadius),
        clockwise: false, // ‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®
      )
      // ‡∏•‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤
      ..lineTo(rect.left + cornerLength, rect.bottom);
    _drawDashedPath(canvas, bottomLeftPath, dashPaint);

    // -------------------------------
    // ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
    final bottomRightPath = Path()
      ..moveTo(rect.right, rect.bottom - cornerLength)
      // ‡∏•‡∏≤‡∏Å‡∏•‡∏á‡πÑ‡∏õ‡∏à‡∏∏‡∏î arc
      ..lineTo(rect.right, rect.bottom - cornerRadius)
      ..arcToPoint(
        Offset(rect.right - cornerRadius, rect.bottom),
        radius: Radius.circular(cornerRadius),
        clockwise: true,
      )
      // ‡∏•‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢
      ..lineTo(rect.right - cornerLength, rect.bottom);
    _drawDashedPath(canvas, bottomRightPath, dashPaint);
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î path ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏∞ (dashed)
  void _drawDashedPath(Canvas canvas, Path path, Paint paint) {
    const dashLength = 25.0;
    const gapLength = 0.0;

    for (final metric in path.computeMetrics()) {
      double distance = 0.0;
      while (distance < metric.length) {
        final end = distance + dashLength;
        final clampedEnd = end < metric.length ? end : metric.length;

        final extractedPath = metric.extractPath(distance, clampedEnd);
        canvas.drawPath(extractedPath, paint);

        distance = clampedEnd + gapLength;
      }
    }
  }
}
