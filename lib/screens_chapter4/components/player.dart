import 'dart:ui' as dart_ui;

import 'package:firstly/screens_chapter4/components/grid.dart';
import 'package:flame/collisions.dart';
import 'package:flame/components.dart';
import 'package:flame/sprite.dart';
import 'package:flutter/material.dart';
import '../logic/game_color_logic.dart';

enum EatState { idle, eatingCorrect, eatingWrong }

EatState eatState = EatState.idle;

class PlayerComponent extends PositionComponent
    with HasGameRef<ColorGame>, CollisionCallbacks {
  /// ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ö‡∏ô Grid
  Vector2 gridPosition = Vector2(3, 2);
  Color currentColor = Colors.transparent;
  static const double cornerRadius = 0; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô

  late Sprite idleSprite;
  late dart_ui.Image eatWrongImage;
  late dart_ui.Image eatCorrectImage;
  SpriteAnimationComponent? _activeWrongAnim;
  SpriteAnimationComponent? _activeCorrectAnim;

  /// Sprite ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
  late Sprite currentSprite;

  /// ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Eat Sprite
  double _eatTimer = 0.0;
  bool _isEating = false;
  bool isEatingWrongColor = false;
  bool isEatingCorrectColor = false;

  PlayerComponent() {
    // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Player ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1 ‡∏ä‡πà‡∏≠‡∏á (50x50)
    size = Vector2(90, 90);
    anchor = Anchor.center;

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    position = toPixelCenter(gridPosition);
    priority = 2; // ‚úÖ ‡∏ß‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
  }

  @override
  Future<void> onLoad() async {
    super.onLoad();

    eatWrongImage =
        (await gameRef.images.load('colorgame/character/wrongColor_sheet.png'));
    eatCorrectImage =
        await gameRef.images.load('colorgame/character/correctColor_sheet.png');

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Sprite ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û PNG
    idleSprite = await Sprite.load('colorgame/character/is_idle.png');

    currentSprite = idleSprite;
  }

  @override
  void update(double dt) {
    super.update(dt);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á pixel ‡∏à‡∏≤‡∏Å gridPosition ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°
    position = toPixelCenter(gridPosition);

    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏ô (_isEating == true) ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    if (_isEating) {
      _eatTimer -= dt;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
      _activeCorrectAnim?.position = toPixelCenter(gridPosition);
      _activeWrongAnim?.position = toPixelCenter(gridPosition);

      if (_eatTimer <= 0) {
        _isEating = false;
        eatState = EatState.idle;

        _activeWrongAnim?.removeFromParent();
        _activeCorrectAnim?.removeFromParent();
        _activeWrongAnim = null;
        _activeCorrectAnim = null;

        currentSprite = idleSprite;
      }
    }
  }

  @override
  void render(Canvas canvas) {
    super.render(canvas);
    final paint = Paint()..color = currentColor; // ‚úÖ ‡∏ß‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
    final rect = RRect.fromRectAndRadius(
      size.toRect(),
      const Radius.circular(cornerRadius), // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡∏°‡∏ô
    );
    canvas.drawRRect(rect, paint);
    if (eatState != EatState.idle) return; // ‡∏≠‡∏¢‡πà‡∏≤ render sprite ‡∏õ‡∏Å‡∏ï‡∏¥‡∏ã‡πâ‡∏≠‡∏ô

    // ‡∏õ‡∏Å‡∏ï‡∏¥
    currentSprite.render(
      canvas,
      size: size + Vector2.all(1),
    );
  }

  @override
  void onRemove() {
    _activeWrongAnim?.removeFromParent();
    _activeCorrectAnim?.removeFromParent();
    _activeWrongAnim = null;
    _activeCorrectAnim = null;

    super.onRemove();
  }

  Future<SpriteAnimationComponent> createEatCorrectAnimation() async {
    final spriteSheet = SpriteSheet(
      image: eatCorrectImage,
      srcSize: Vector2(1920, 1920), // ‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡∏•‡∏∞ 512x512
    );

    final animation = SpriteAnimation.fromFrameData(
      eatCorrectImage,
      SpriteAnimationData([
        spriteSheet.createFrameData(0, 0, stepTime: 0.2),
        spriteSheet.createFrameData(0, 1, stepTime: 0.2),
        spriteSheet.createFrameData(0, 1, stepTime: 0.2),
        spriteSheet.createFrameData(0, 0, stepTime: 0.2),
      ]),
    );

    const scaleFactor = 120 / 1920; // ‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î player grid

    return SpriteAnimationComponent()
      ..animation = animation
      ..size = Vector2(1920, 1920) * scaleFactor
      ..anchor = Anchor.center
      ..position = toPixelCenter(gridPosition);
  }

  Future<SpriteAnimationComponent> createEatWrongAnimation() async {
    final spriteSheet = SpriteSheet(
      image: eatWrongImage,
      srcSize: Vector2(1920, 1920),
    );
    final animation = SpriteAnimation.fromFrameData(
      eatWrongImage,
      SpriteAnimationData([
        spriteSheet.createFrameData(0, 0, stepTime: 0.2),
        spriteSheet.createFrameData(0, 1, stepTime: 0.2),
        spriteSheet.createFrameData(0, 1, stepTime: 0.2),
        spriteSheet.createFrameData(0, 0, stepTime: 0.2),
      ]),
    );
    const scaleFactor = 125 / 1920;

    return SpriteAnimationComponent()
      ..animation = animation
      ..size = Vector2(1920, 1920) * scaleFactor
      ..anchor = Anchor.center
      ..position = toPixelCenter(gridPosition);
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Player ‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á newDirection (Vector2(-1,0) ‡πÄ‡∏ä‡πà‡∏ô)
  void move(Vector2 newDirection) {
    final nextPos = gridPosition + newDirection;
    if (isInsideGrid(nextPos)) {
      gridPosition = nextPos;
    }
  }

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏Å‡∏¥‡∏ô" (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡πÑ‡∏õ‡∏£‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô eat 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  Future<void> startEating() async {
    if (eatState == EatState.eatingWrong) {
      _activeWrongAnim?.removeFromParent();
      _activeWrongAnim = null;
    }

    _activeCorrectAnim?.removeFromParent();
    eatState = EatState.eatingCorrect;

    _isEating = true;
    _eatTimer = 1.5; // 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    final anim = await createEatCorrectAnimation();
    anim.position = toPixelCenter(gridPosition);
    _activeCorrectAnim = anim;
    gameRef.add(anim);
  }

  Future<void> eatingWrongColor() async {
    // üîÅ ‡∏•‡∏ö animation ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (eatState == EatState.eatingCorrect) {
      _activeCorrectAnim?.removeFromParent();
      _activeCorrectAnim = null;
    }

    _activeWrongAnim?.removeFromParent(); // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    eatState = EatState.eatingWrong;

    _isEating = true;
    _eatTimer = 1.5;

    final anim = await createEatWrongAnimation();
    anim.position = toPixelCenter(gridPosition);
    _activeWrongAnim = anim;
    gameRef.add(anim);
  }

  void clearEatingAnimation() {
    // 1) ‡∏•‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    _activeWrongAnim?.removeFromParent();
    _activeWrongAnim = null;

    _activeCorrectAnim?.removeFromParent();
    _activeCorrectAnim = null;

    // 2) ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    _eatTimer = 0.0;
    _isEating = false;
    eatState = EatState.idle;

    // 3) ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Sprite ‡πÄ‡∏î‡∏¥‡∏°
    currentSprite = idleSprite;

    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô set currentColor = Colors.transparent;
    // currentColor = Colors.transparent;

    debugPrint("‚ùå Cleared eating animation. Player back to idle sprite.");
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  Future<void> resetPosition() async {
    await Future.delayed(const Duration(milliseconds: 300));
    gridPosition = Vector2(3, 2); // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    position = toPixelCenter(gridPosition); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏à‡∏≠
    currentSprite = idleSprite; // ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    debugPrint("üîÑ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô!");
  }

  /// ‡∏´‡∏≤ "‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°" ‡∏Ç‡∏≠‡∏á Player ‡πÉ‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
  /// ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ Manual Checking ‡∏Å‡∏±‡∏ö Goal (‡∏ß‡∏á‡∏Å‡∏•‡∏°)
  Rect get boundingBox {
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 70% ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á
    double boxWidth = size.x * 0.7;
    double boxHeight = size.y * 0.7;

    // ‡∏´‡∏≤ left, top ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î center (x, y) ‚Äì anchor = center
    final left = x - (boxWidth / 2);
    final top = y - (boxHeight / 2);

    return Rect.fromLTWH(left, top, boxWidth, boxHeight);
  }
}
