import 'dart:math';

import 'package:firstly/screens_chapter4/components/grid.dart';
import 'package:flame/components.dart';
import 'package:flame/game.dart';
import 'package:flutter/material.dart';
import '../components/controller.dart';
import '../components/enemy.dart';
import '../components/enemy_intent_marker.dart';
import '../components/floating_score_text.dart';
import '../components/goal.dart';
import '../components/player.dart';
import '../levels/levels_data.dart';

class ColorGame extends FlameGame with HasCollisionDetection {
  bool _isLoaded = false; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô onLoad() ‡∏ã‡πâ‡∏≥

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£/‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  late PlayerComponent player;
  late GameController controller;
  late GameGrid grid;
  EnemyComponent? enemy; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô null
  List<EnemyIntentMarker> _enemyIntentMarkers = [];

  final List<GoalComponent> goals = [];
  final Random _random = Random();

  late SpriteComponent backgroundSprite; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á

  final Level levelData;

  int totalScore = 0;
  int consecutiveCorrect = 0;

  double timeLeft = 120;
  bool isGameOver = false;
  bool _isTimePaused = false;
  final ValueNotifier<int> timeNotifier = ValueNotifier<int>(120);
  final ValueNotifier<bool> bonusNotifier = ValueNotifier(false); // NEW

  bool _enemyInGame = false;
  bool _enemySpawned = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Enemy ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  bool get isWarningState => _isWarningState;
  bool _isWarningState = false;
  bool isBonusState = false;
  double _warningTimer = 0.0;
  int _playerMoveCount = 0;
  final void Function(Color)? onTargetColorChanged;
  final void Function(bool isCorrect)? onAnswerResult;
  final void Function(int)? onScoreChanged;
  final void Function(int)? onComboChanged;
  final void Function(int starCount)? onGameOver;

  ColorGame(
    this.levelData, {
    this.onGameOver,
    this.onTargetColorChanged,
    this.onScoreChanged,
    this.onComboChanged,
    this.onAnswerResult,
    void Function(int index, bool isCorrect)? onAnswerEachColorIndex,
  }) {
    debugMode = false;
  }
  @override
  Color backgroundColor() => const Color.fromARGB(255, 255, 255, 255);

  @override
  Future<void> onLoad() async {
    controller = GameController(this);
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (_isLoaded) {
      debugPrint('‚ö†Ô∏è onLoad() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥ ‡πÅ‡∏ï‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ');
      return;
    }
    _isLoaded = true;

    final bgSprite =
        await loadSprite('colorgame/grid_bg_color.png'); // ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    backgroundSprite = SpriteComponent(
      sprite: bgSprite,
      size: size, // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
      position: Vector2.zero(),
    ); // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    await add(backgroundSprite); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏Å‡∏°

    // ... (‡πÇ‡∏´‡∏•‡∏î / add ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥) ...
    grid = GameGrid();
    player = PlayerComponent();
    controller = GameController(this);

    await addAll([
      grid,
      player,
      controller,
    ]);
    // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á Goal
    spawnRandomGoals();
  }

  @override
  void update(double dt) {
    super.update(dt);
    if (!isGameOver) {
      _handleWarningAndTime(dt); // 1) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Warning + ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    }

    if (_enemyInGame) {
      _checkEnemyCollision();
      _checkEnemyGoalCollision();
    }

    // Manual Checking: Player (‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°) ‡∏Å‡∏±‡∏ö Goal (‡∏ß‡∏á‡∏Å‡∏•‡∏°) ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô => ‡∏•‡∏ö goal
    checkGoalCollision();
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _handleWarningAndTime() ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤ + Warning
  /// ================================================================

  void _handleWarningAndTime(double dt) {
    if (!isGameOver && !_isTimePaused) {
      // ‡∏ñ‡πâ‡∏≤ "‡πÑ‡∏°‡πà" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô warningState => ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
      if (!_isWarningState) {
        timeLeft -= dt;
        if (timeLeft <= 0) {
          timeLeft = 0;

          endGame();
        }
        timeNotifier.value = timeLeft.floor();

        // ‡∏ñ‡πâ‡∏≤ timeLeft <= 35 ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà spawnEnemy => ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà warningState
        if (!_enemySpawned && timeLeft <= 25) {
          _isWarningState = true;
          _warningTimer = 2.0; // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û 2 ‡∏ß‡∏¥
          isBonusState = true;
          Future.delayed(const Duration(milliseconds: 1000), () {
            bonusNotifier.value = true; // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡πÅ‡∏à‡πâ‡∏á UI
          });
          // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‚Äú‡πÇ‡∏ä‡∏ß‡πå‡∏†‡∏≤‡∏û warning‚Äù -> ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Flutter/Overlay/‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
          debugPrint("Warning! Enemy is about to spawn...");
        }
      } else {
        // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô warningState => ‡πÑ‡∏°‡πà‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        // ‡πÅ‡∏ï‡πà‡∏•‡∏î warningTimer
        _warningTimer -= dt;
        if (_warningTimer <= 0) {
          // ‡∏Ñ‡∏£‡∏ö 2 ‡∏ß‡∏¥ => ‡∏õ‡∏¥‡∏î warningState
          _isWarningState = false;
          // Spawn enemy ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          _spawnEnemy();
        }
      }
    }
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  void pauseGameTime() {
    _isTimePaused = true;
    debugPrint("‚è∏Ô∏è Game time is paused.");
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≠
  void resumeGameTime() {
    _isTimePaused = false;
    debugPrint("‚ñ∂Ô∏è Game time is resumed.");
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _checkGoalCollision() ‡πÄ‡∏ä‡πá‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Player ‡∏Å‡∏±‡∏ö Goal
  /// ================================================================

  void checkGoalCollision() {
    final toRemove = <GoalComponent>[];
    for (final goal in List<GoalComponent>.from(goals)) {
      if (isCollidingRectCircle(player, goal)) {
        if (goal.colorTarget == levelData.targetColor.first) {
          player.startEating();
          onAnswerResult?.call(true);

          consecutiveCorrect++;
          onComboChanged?.call(consecutiveCorrect);
          final scoreThisTime = calculateComboScore(consecutiveCorrect);
          totalScore += scoreThisTime;
          onScoreChanged?.call(totalScore);
          // ‡∏à‡∏∏‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á FloatingScoreText
          final effectPos =
              player.position.clone() // ‡∏´‡∏£‡∏∑‡∏≠ player.position.clone()
                ..y -= 80
                ..x -= 20;
          final floatingText = FloatingScoreText(
            text: "+$scoreThisTime",
            position: effectPos, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°
            duration: 0.5, // ‡∏•‡∏≠‡∏¢ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            moveSpeed: 50.0, // ‡∏•‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏ä‡πâ‡∏≤‡πÜ
            textColor: const Color.fromARGB(255, 255, 255, 255),
          );
          add(floatingText); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô game

          toRemove.add(goal); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
          // 1) ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Goal ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠

          final nextColor = pickNextColorFromGoals(goal);
          // 2) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
          Future.delayed(const Duration(milliseconds: 500), () {
            // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö
            _changeTargetColor(nextColor);
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
          });
          // ‚úÖ Spawn ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö
          spawnNewGoal(goal.colorTarget);
        } else {
          //‡∏Å‡∏¥‡∏ô‡∏ú‡∏¥‡∏î‡∏™‡∏µ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ
          debugPrint("üö´ ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏¥‡∏î‡∏™‡∏µ! ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö: ${goal.colorTarget}");
          toRemove.add(goal); // ‚úÖ ‡∏•‡∏ö Goal ‡∏™‡∏µ‡∏ú‡∏¥‡∏î
          player.eatingWrongColor();
          consecutiveCorrect = 0;
          onComboChanged?.call(0);
          onAnswerResult?.call(false);

          spawnNewGoal(goal.colorTarget); // ‚úÖ Spawn ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏µ‡∏ú‡∏¥‡∏î
        }
      }
    }
    // ‡∏•‡∏ö Goal ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
    for (final g in toRemove) {
      g.removeFromParent();
      goals.remove(g);
    }
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô spawnEnemy() ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  /// ================================================================

  void _spawnEnemy() {
    if (_enemySpawned) return; // ‡∏Å‡∏±‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    enemy = EnemyComponent();
    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    enemy!.gridPosition = _getRandomEnemyPos();
    add(enemy!);
    _enemySpawned = true;
    _enemyInGame = true; // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ enemy ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏î‡∏¥‡∏ô
    debugPrint("Enemy Spawned after warning!");
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô incrementPlayerMoveCount() ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Player ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
  /// ================================================================

  void incrementPlayerMoveCount() {
    _playerMoveCount++;
    debugPrint("Player moved $_playerMoveCount times");

    // 1) ‡∏ñ‡πâ‡∏≤ enemy ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
    if (_enemyInGame && enemy != null) {
      if (_playerMoveCount == 2) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì nextPos ‡∏ó‡∏µ‡πà‡∏®‡∏±‡∏ï‡∏£‡∏π ‚Äú‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏à‡∏∞‡πÑ‡∏õ‚Äù ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
        final possiblePositions = _predictEnemyNextPosMultiple();

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Marker ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà nextPos
        _showEnemyIntentMarkers(possiblePositions);
      }
      if (_playerMoveCount >= 3) {
        // 2) ‡∏•‡∏ö Marker (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ Enemy ‡πÄ‡∏î‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á
        _hideEnemyIntentMarkers();
        _moveEnemyOneStep(); // ‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏î‡∏¥‡∏ô 1 ‡∏ä‡πà‡∏≠‡∏á
        _playerMoveCount = 0; // reset
      }
    }
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _predictEnemyNextMove() ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Enemy ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  /// ================================================================

  List<Vector2> _predictEnemyNextPosMultiple() {
    if (enemy == null) return [];

    final px = player.gridPosition.x;
    final py = player.gridPosition.y;
    final ex = enemy!.gridPosition.x;
    final ey = enemy!.gridPosition.y;

    double dx = px - ex;
    double dy = py - ey;

    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏ñ‡πâ‡∏≤ abs(dx) > abs(dy) -> ‡∏≠‡∏≤‡∏à‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏Å‡∏ô X ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
    // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤ abs(dx)==abs(dy) -> ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏ó‡∏≤‡∏á
    // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ logic ‡∏≠‡∏∑‡πà‡∏ô ‡∏Å‡πá‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

    if (dx.abs() > dy.abs()) {
      // ‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏Å‡∏ô X ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      final moveX = dx > 0 ? 1.0 : -1.0;
      return [enemy!.gridPosition + Vector2(moveX, 0)];
    } else if (dx.abs() < dy.abs()) {
      // ‡πÄ‡∏î‡∏¥‡∏ô‡πÅ‡∏Å‡∏ô Y ‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      final moveY = dy > 0 ? 1.0 : -1.0;
      return [enemy!.gridPosition + Vector2(0, moveY)];
    } else {
      // dx.abs() == dy.abs() => ‡∏°‡∏µ 2 ‡∏ó‡∏≤‡∏á
      final moveX = dx > 0 ? 1.0 : -1.0;
      final moveY = dy > 0 ? 1.0 : -1.0;
      final pos1 = enemy!.gridPosition + Vector2(moveX, 0);
      final pos2 = enemy!.gridPosition + Vector2(0, moveY);
      return [pos1, pos2];
    }
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _moveEnemyOneStep() ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Player ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
  /// ================================================================

  void _moveEnemyOneStep() {
    // ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏á‡πà‡∏≤‡∏¢ ‡πÜ: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Player ‡∏Å‡∏±‡∏ö Enemy
    // ‡∏Ç‡∏¢‡∏±‡∏ö Enemy 1 ‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏õ‡∏´‡∏≤ Player
    if (enemy == null) return;

    _hideEnemyIntentMarkers(); // ‡∏•‡∏ö Marker (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏ô
    final list = _predictEnemyNextPosMultiple();
    if (list.isEmpty) return;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 pos ‡∏à‡∏≤‡∏Å list
    final chosenPos =
        list.length == 1 ? list.first : list[_random.nextInt(list.length)];

    enemy!.moveTo(chosenPos);
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _checkEnemyCollision() ‡πÄ‡∏ä‡πá‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Enemy ‡∏Å‡∏±‡∏ö Player
  /// ================================================================

  void _checkEnemyCollision() {
    if (enemy == null) return; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà spawn
    Rect enemyRect = enemy!.toRect(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î toRect() ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô player
    Rect playerRect = player.boundingBox;
    if (_isCollidingRectRect(enemyRect, playerRect)) {
      // 1) ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
      player.removeFromParent();

      endGame();
    }
  }

  void _checkEnemyGoalCollision() {
    if (enemy == null) return;
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå goal ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    final toRemove = <GoalComponent>[];

    // ‡πÄ‡∏≠‡∏≤ Rect ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏°‡∏≤
    final enemyRect = enemy!.toRect(); // enemy!.gridPosition => toRect()

    for (final goal in List<GoalComponent>.from(goals)) {
      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ï‡∏£‡∏ß‡∏à collision ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á "Rect" vs "Goal (Circle)"
      if (_isCollidingRectCircleRect(enemyRect, goal)) {
        // ‡∏ñ‡πâ‡∏≤ Enemy ‡∏ä‡∏ô Goal => ‡∏•‡∏ö Goal ‡πÅ‡∏•‡πâ‡∏ß spawn ‡πÉ‡∏´‡∏°‡πà
        toRemove.add(goal);
        // spawn ‡πÉ‡∏´‡∏°‡πà
        spawnNewGoal(goal.colorTarget);
      }
    }

    // ‡∏•‡∏ö Goal ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏≠‡∏≠‡∏Å
    for (final g in toRemove) {
      g.removeFromParent();
      goals.remove(g);
    }
  }

  //=================================================================
  // _showEnemyIntentMarker() -> ‡πÅ‡∏™‡∏î‡∏á Marker ‡∏ö‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Enemy
  //=================================================================

  void _showEnemyIntentMarkers(List<Vector2> positions) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ marker ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
    _hideEnemyIntentMarkers();

    for (final pos in positions) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker
      final marker = EnemyIntentMarker(pos);
      add(marker);
      _enemyIntentMarkers.add(marker);
    }
    debugPrint("Showed Enemy Intent Marker at $positions");
  }

  //================================================================
  // _hideEnemyIntentMarker() -> ‡∏•‡∏ö marker
  //================================================================

  void _hideEnemyIntentMarkers() {
    for (final marker in _enemyIntentMarkers) {
      marker.removeFromParent();
    }
    _enemyIntentMarkers.clear();
    debugPrint("Removed Enemy Intent Markers");
  }

  /// ================================================================
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _changeTargetColor() ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  /// ================================================================

  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  void _changeTargetColor(Color newColor) {
    levelData.targetColor = [newColor];
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    onTargetColorChanged?.call(newColor);
  }

  /// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏™‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà" ‡∏à‡∏≤‡∏Å Goal ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô goals
  /// (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ goal ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö)
  Color pickNextColorFromGoals(GoalComponent removedGoal) {
    // ‡∏Å‡πá‡∏≠‡∏õ‡∏õ‡∏µ‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Goal ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    final remainingGoals = List<GoalComponent>.from(goals);

    // ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
    remainingGoals.remove(removedGoal);

    if (remainingGoals.isNotEmpty) {
      final randIndex = _random.nextInt(remainingGoals.length);
      return remainingGoals[randIndex].colorTarget;
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏à‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Å‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      return Colors.red;
    }
  }

  //================================================================
  // 9) spawnNewGoal() -> ‡∏™‡∏£‡πâ‡∏≤‡∏á Goal ‡πÉ‡∏´‡∏°‡πà 1 ‡∏ï‡∏±‡∏ß ‡πÇ‡∏î‡∏¢ "‡πÑ‡∏°‡πà" ‡πÉ‡∏ä‡πâ attempts
  //================================================================
  void spawnNewGoal(Color color) {
    // 1) ‡∏´‡∏≤ freePositions ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏Ñ‡∏£)
    final freePositions = findAllFreePositions(
      minDistanceFromPlayer: 2.0, // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà 1.0 ‡∏Å‡πá‡πÑ‡∏î‡πâ
    );

    if (freePositions.isEmpty) {
      debugPrint("‚ö†Ô∏è spawnNewGoal: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Goal ‡∏™‡∏µ $color");
      return;
    }
    // 2) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡πà‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    final index = _random.nextInt(freePositions.length);
    final chosenPos = freePositions[index];

    // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á Goal
    final newGoal = GoalComponent(chosenPos, color);
    add(newGoal);
    goals.add(newGoal);

    debugPrint("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Goal ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏µ $color ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á $chosenPos");
  }

  //================================================================
  // 10) spawnRandomGoals() -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢ Goal ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (6 ‡∏™‡∏µ)
  //================================================================
  void spawnRandomGoals() {
    final numGoals = levelData.numberOfGoals;
    final List<Color> colors = goalColors.take(numGoals).toList();

    // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    var freePositions = findAllFreePositions(minDistanceFromPlayer: 2.0);

    // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á => ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
    if (freePositions.length < colors.length) {
      debugPrint("‚ö†Ô∏è spawnRandomGoals: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Goal ‡∏Ñ‡∏£‡∏ö 6");
    }

    for (final color in colors) {
      if (freePositions.isEmpty) {
        debugPrint("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ => ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á Goal");
        break;
      }
      final i = _random.nextInt(freePositions.length);
      final chosenPos = freePositions[i];

      final goal = GoalComponent(chosenPos, color);
      add(goal);
      goals.add(goal);
      debugPrint("üéØ Spawned Goal color=$color at $chosenPos");

      // ‡πÄ‡∏≠‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå
      freePositions.removeAt(i);
    }
  }

  //================================================================
  // 11) ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô + ‡∏´‡πà‡∏≤‡∏á Player)
  //================================================================
  List<Vector2> findAllFreePositions({
    double minDistanceFromPlayer = 0.0,
  }) {
    // 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á Set ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á "‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∂‡∏î"
    final occupiedPositions = <Vector2>{};

    // ‡πÉ‡∏™‡πà player
    occupiedPositions.add(player.gridPosition.clone());

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ enemy => ‡πÉ‡∏™‡πà‡∏î‡πâ‡∏ß‡∏¢
    if (enemy != null) {
      occupiedPositions.add(enemy!.gridPosition.clone());
    }

    // ‡πÉ‡∏™‡πà‡∏ó‡∏∏‡∏Å goal
    for (final g in goals) {
      occupiedPositions.add(g.spawnPosition.clone());
    }

    // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏¥‡∏î"
    final allPositions = <Vector2>[];
    for (int x = 0; x < kGridWidth; x++) {
      for (int y = 0; y < kGridHeight; y++) {
        allPositions.add(Vector2(x.toDouble(), y.toDouble()));
      }
    }

    // 3) ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∂‡∏î
    allPositions.removeWhere((pos) => occupiedPositions.contains(pos));

    // 4) ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å player
    if (minDistanceFromPlayer > 0) {
      allPositions.removeWhere((pos) {
        final dist = (pos - player.gridPosition).length;
        return dist < minDistanceFromPlayer;
      });
    }

    return allPositions;
  }

  //================================================================
  // 12) repositionGoals() -> ‡∏•‡∏ö Goal ‡πÄ‡∏Å‡πà‡∏≤ => ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  //================================================================
  void repositionGoals() {
    for (final goal in goals) {
      goal.removeFromParent();
    }
    goals.clear();
    spawnRandomGoals();
  }

  //================================================================
  // 13) ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π Enemy
  //================================================================
  Vector2 _getRandomEnemyPos() {
    while (true) {
      final x = _random.nextInt(kGridWidth);
      final y = _random.nextInt(kGridHeight);
      final pos = Vector2(x.toDouble(), y.toDouble());
      final dist = (pos - player.gridPosition).length;
      if (dist >= 2.0) {
        return pos;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡πá‡∏ß‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠
    }
  }

  //================================================================
  // 14) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô Rect vs Rect
  //================================================================
  bool _isCollidingRectRect(Rect r1, Rect r2) {
    return r1.overlaps(r2);
  }

  //================================================================
  // 15) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  //================================================================
  int calculateComboScore(int comboCount) {
    int rawScore;
    if (isBonusState) {
      rawScore = 30 + 4 * (comboCount - 1);
      if (rawScore > 40) rawScore = 40;
    } else {
      rawScore = 10 + 2 * (comboCount - 1);
      if (rawScore > 20) rawScore = 20;
    }
    return rawScore;
  }

  int calculateStars(int score) {
    if (score >= 980) return 3;
    if (score >= 680) return 2;
    if (score >= 380) return 1;
    return 0;
  }

  void endGame() {
    if (!isGameOver) {
      isGameOver = true;
      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (update())
      final starCount = calculateStars(totalScore);
      onGameOver?.call(starCount);
    }
  }

  //================================================================
  // 16) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô (PlayerRect vs Goal ‡∏ß‡∏á‡∏Å‡∏•‡∏°)
  //================================================================
  bool isCollidingRectCircle(
      PlayerComponent rectComp, GoalComponent circleComp) {
    final playerRect = rectComp.boundingBox;
    final centerGoal = circleComp.getCenter();
    final cx = centerGoal.x;
    final cy = centerGoal.y;
    final r = circleComp.radius;

    final closestX = cx.clamp(playerRect.left, playerRect.right);
    final closestY = cy.clamp(playerRect.top, playerRect.bottom);

    final dx = cx - closestX;
    final dy = cy - closestY;
    final distSq = dx * dx + dy * dy;

    return distSq <= (r * r);
  }

  bool _isCollidingRectCircleRect(Rect r, GoalComponent circle) {
    final centerGoal = circle.getCenter(); // ‡πÑ‡∏î‡πâ (x + radius, y + radius)
    final cx = centerGoal.x;
    final cy = centerGoal.y;
    final rGoal = circle.radius;

    // ‡∏´‡∏≤ closestX, closestY
    final closestX = cx.clamp(r.left, r.right);
    final closestY = cy.clamp(r.top, r.bottom);

    final dx = cx - closestX;
    final dy = cy - closestY;
    final distSq = dx * dx + dy * dy;

    return distSq <= (rGoal * rGoal);
  }

  //================================================================
  // 17) ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• -> GridPos
  //================================================================
  Vector2 toGridPosition(Vector2 pixelPos) {
    final offsetX = kGridOffsetX;
    final offsetY = kGridOffsetY;
    final gx = ((pixelPos.x - offsetX) / kTileSize).floorToDouble();
    final gy = ((pixelPos.y - offsetY) / kTileSize).floorToDouble();
    return Vector2(gx, gy);
  }

  //================================================================
  // 18) Reset Game
  //================================================================
  void resetGame() {
    debugPrint("=== resetGame() START ===");

    // 1) ‡∏•‡∏ö Enemy (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (enemy != null) {
      enemy!.removeFromParent();
      enemy = null;
      debugPrint("‚Ä¢ Removed old Enemy");
    }

    // 2) ‡∏•‡∏ö Goals
    for (final g in goals) {
      g.removeFromParent();
    }
    goals.clear();
    debugPrint("‚Ä¢ Removed all Goals");

    // 3) ‡∏•‡∏ö Player ‡πÄ‡∏î‡∏¥‡∏° ‡∏ñ‡πâ‡∏≤ Player ‡∏°‡∏µ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏°‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    //    ‡πÄ‡∏ä‡πà‡∏ô Player ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô clearEatingAnimation()
    //    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ
    try {
      // ‡∏ñ‡πâ‡∏≤ Player ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ public ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏¥‡∏ô:
      player.clearEatingAnimation(); // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ
    } catch (e) {
      debugPrint("‚Ä¢ No eating animation to clear: $e");
    }
    player.removeFromParent();
    debugPrint("‚Ä¢ Removed old Player");

    // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á Player ‡πÉ‡∏´‡∏°‡πà (idle)
    final newPlayer = PlayerComponent();
    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á gridPosition ‡∏Å‡πá‡∏ó‡∏≥‡πÑ‡∏î‡πâ
    // newPlayer.currentColor = Colors.white;
    add(newPlayer);
    player = newPlayer;
    debugPrint("‚Ä¢ Created and added new Player");

    // 5) ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    timeLeft = 120;
    isGameOver = false;
    _playerMoveCount = 0;
    totalScore = 0;
    consecutiveCorrect = 0;

    _isWarningState = false;
    _warningTimer = 0.0;
    isBonusState = false;
    bonusNotifier.value = false;

    _enemySpawned = false;
    _enemyInGame = false;

    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï timeNotifier ‡∏î‡πâ‡∏ß‡∏¢:
    timeNotifier.value = 120;

    debugPrint("‚Ä¢ Reset game states");

    // 6) ‡∏™‡∏£‡πâ‡∏≤‡∏á Goal ‡πÉ‡∏´‡∏°‡πà
    spawnRandomGoals();
    debugPrint("‚Ä¢ Spawned new Goals");

    debugPrint("=== resetGame() COMPLETE ===");
  }
}
//================================================================
