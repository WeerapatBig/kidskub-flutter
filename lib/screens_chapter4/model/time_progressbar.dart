import 'package:flutter/material.dart';

import 'time_alert_anim.dart';

class TimeProgreesBarWidget extends StatefulWidget {
  final ValueNotifier<int> remainingTime; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  final int maxTime; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  final ValueNotifier<bool> isAlertNotifier;

  const TimeProgreesBarWidget({
    Key? key,
    required this.remainingTime,
    required this.maxTime,
    required this.isAlertNotifier,
  }) : super(key: key);

  @override
  State<TimeProgreesBarWidget> createState() => _TimeProgreesBarWidgetState();
}

class _TimeProgreesBarWidgetState extends State<TimeProgreesBarWidget> {
  @override
  Widget build(BuildContext context) {
    Size screenSize = MediaQuery.of(context).size;

    return ValueListenableBuilder<bool>(
      valueListenable: widget.isAlertNotifier,
      builder: (_, isAlert, __) {
        return ValueListenableBuilder<int>(
          valueListenable: widget.remainingTime,
          builder: (_, time, __) {
            double progress =
                time / widget.maxTime; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå Progress
            double barHeight = screenSize.height; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á ProgressBar
            double barWidth = screenSize.width; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á ProgressBar

            return Stack(
              children: [
                // --- ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ---
                Positioned(
                  left: barWidth * 0.08, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
                  bottom: barHeight * 0.05, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      SizedBox(
                        height: barHeight * 0.24, // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
                        width: barHeight * 1.18, // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                        child: Image.asset(
                          'assets/images/linegamelist/time_bar.png', // ‡∏£‡∏π‡∏õ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
                          width: barHeight * 0.8, // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
                          height: barHeight * 0.8,
                          fit: BoxFit.contain,
                        ),
                      ),
                      Positioned(
                        top: barHeight * 0.122, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                        right: barWidth * 0.015, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
                        height: barHeight * 0.03,
                        width: barWidth * 0.6,
                        child: Stack(
                          children: [
                            // ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°
                            Container(
                              decoration: BoxDecoration(
                                color: const Color.fromARGB(
                                    255, 33, 33, 33), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                                border: Border.all(
                                  color: Colors.black,
                                  width: 5,
                                ),
                                borderRadius:
                                    BorderRadius.circular(barHeight * 0.5),
                              ),
                            ),
                            FractionallySizedBox(
                              alignment: Alignment.centerLeft,
                              widthFactor: progress, // ‡πÉ‡∏ä‡πâ progress
                              child: Container(
                                decoration: BoxDecoration(
                                  border: Border.all(
                                    color: Colors.black, // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á ProgressBar
                                    width: 5,
                                  ),
                                  shape: BoxShape.rectangle,
                                  color: Colors.red, // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏Ç‡∏≠‡∏á ProgressBar
                                  borderRadius:
                                      BorderRadius.circular(barHeight * 0.5),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                          top: barHeight * 0.075,
                          left: barWidth * 0.22,
                          child: Container(
                            width: barWidth * 0.01,
                            height: barHeight * 0.12,
                            decoration: BoxDecoration(
                              color: const Color.fromARGB(
                                  255, 242, 242, 242), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                              border: Border.all(
                                color: const Color.fromARGB(255, 33, 33, 33),
                                width: 3.5,
                              ),
                              borderRadius:
                                  BorderRadius.circular(barHeight * 0.5),
                            ),
                          )),
                    ],
                  ),
                ),

                // üëà ‡∏£‡∏π‡∏õ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô)
                if (isAlert) const TimeAlertImage(),
                // --- Icon ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ ---
                Positioned(
                  bottom: barHeight * 0.083, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                  left: barWidth * 0.08, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                  child: SizedBox(
                    height: barHeight * 0.18, // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
                    width: barHeight * 0.18, // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                    child: Image.asset(
                      'assets/images/linegamelist/clock.png',
                      fit: BoxFit.contain,
                    ),
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  }
}
