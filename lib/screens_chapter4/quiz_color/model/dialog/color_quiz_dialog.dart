import 'dart:async';
import 'dart:math';
import 'package:firstly/function/mediaquery_values.dart';
import 'package:flutter/material.dart';

import '../../../../widgets/custom_button.dart';
import '../../../../widgets/hand_guide.dart';
import 'horizontal_progress_bar.dart';

/// ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡∏ö‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏Å‡∏°/‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢ Stack ‡∏´‡∏£‡∏∑‡∏≠ Navigator overlay
class ColorQuizDialog extends StatefulWidget {
  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏¥‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏ö sequence)
  final VoidCallback onExit;

  /// ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ü‡∏£‡∏° (1‚Äì1.5 s) ‚Äì ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á
  final Duration frameDuration;

  const ColorQuizDialog({
    Key? key,
    required this.onExit,
    this.frameDuration = const Duration(milliseconds: 2500),
  }) : super(key: key);

  @override
  State<ColorQuizDialog> createState() => _ColorQuizDialogState();
}

class _ColorQuizDialogState extends State<ColorQuizDialog>
    with TickerProviderStateMixin {
  static const _imagePaths = [
    'assets/images/colorgame/quiz_color/dialog/dialogs_1.png',
    'assets/images/colorgame/quiz_color/dialog/dialogs_2.png',
    'assets/images/colorgame/quiz_color/dialog/dialogs_3.png',
    'assets/images/colorgame/quiz_color/dialog/dialogs_4.png',
    'assets/images/colorgame/quiz_color/dialog/dialogs_5.png',
    'assets/images/colorgame/quiz_color/dialog/dialogs_6.png',
  ];

  static const double _designW = 1280;
  static const double _designH = 720;

  double progressValue = 0.0;
  int currentAction = 0; // 1 = next, -1 = prev, 0 = none
  int _currentIndex = 0; // ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  bool _buttonLocked = false; // true ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå

  // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CONTROLLERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  late final AnimationController _dialogCountdownCtrl; // 2.5 ‡∏ß‡∏¥
  late final AnimationController _buttonCooldownCtrl; // 1.5 ‡∏ß‡∏¥

  late final AnimationController _slideController;
  late final Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _dialogCountdownCtrl = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 2500),
    )..addStatusListener((status) {
        if (status == AnimationStatus.completed && mounted) {
          if (_currentIndex < _imagePaths.length - 1) {
            _goNextImage(); // ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï progress ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ô‡∏µ‡πâ
          } else {
            // ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏¢‡πÜ
            _dialogCountdownCtrl.value = 0.0;
            _dialogCountdownCtrl.stop();
          }
        }
      });

    _buttonCooldownCtrl = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    )..addStatusListener((s) {
        if (s == AnimationStatus.completed && mounted) {
          setState(() => _buttonLocked = false); // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å
        }
      });

    _slideController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 600),
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1), // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
      end: Offset.zero, // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutBack, // ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•‡∏Ç‡∏∂‡πâ‡∏ô
    ));

    _slideController.forward(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏â‡∏≤‡∏Å
    _dialogCountdownCtrl.forward(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
  }

  Future<void> _handleArrowTap(VoidCallback changeImage) async {
    if (_buttonLocked) return; // ‡∏´‡πâ‡∏≤‡∏°‡∏Å‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏≠‡∏¢‡∏π‡πà

    changeImage(); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏û
    _dialogCountdownCtrl.forward(from: 0); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï progress
    _buttonCooldownCtrl.forward(from: 0); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏õ‡∏∏‡πà‡∏°
    setState(() => _buttonLocked = true);
  }

  void _goNextImage() {
    if (!mounted) return;

    if (_currentIndex < _imagePaths.length - 1) {
      setState(() => _currentIndex++);
      _dialogCountdownCtrl.forward(from: 0); // ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    } else {
      // ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‚Üí ‡∏´‡∏¢‡∏∏‡∏î
      _dialogCountdownCtrl.value = 0.0;
      _dialogCountdownCtrl.stop();
    }
  }

  void _goPrevImage() {
    if (_currentIndex == 0) return;

    setState(() {
      _currentIndex--;
      _dialogCountdownCtrl.forward(from: 0); // ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô progress ‡πÉ‡∏´‡∏°‡πà
    });
  }

  Widget _progressBar(BuildContext context) => AnimatedBuilder(
        animation: _dialogCountdownCtrl,
        builder: (ctx, _) => HorizontalProgressBar(
          progress: _dialogCountdownCtrl.value,
        ),
      );

  @override
  void dispose() {
    _dialogCountdownCtrl.dispose();
    _buttonCooldownCtrl.dispose();
    _slideController.dispose();
    super.dispose();
  }

  Widget _buildFixedLayout() {
    return SizedBox(
      width: _designW,
      height: _designH,
      child: Center(
        child: Stack(
          clipBehavior: Clip.none,
          children: [
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 50),
              child: Image.asset(
                _imagePaths[_currentIndex],
                key: ValueKey(_currentIndex),
              ),
            ),

            Positioned(
              bottom: context.screenHeight * 0.03,
              left: context.screenWidth * 0.04,
              right: context.screenWidth * 0.04,
              child: AnimatedBuilder(
                animation: _dialogCountdownCtrl,
                builder: (ctx, _) => _progressBar(ctx),
              ),
            ),

            // ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            if (_currentIndex > 0)
              Positioned(
                top: context.screenHeight * 0.04,
                bottom: context.screenHeight * 0.04,
                left: context.screenWidth * 0.04,
                child: SizedBox(
                  width: context.screenWidth * 0.025,
                  child: CustomButton(
                    onTap: () => _handleArrowTap(_goPrevImage),
                    child: Image.asset(
                        'assets/images/colorgame/quiz_color/dialog/left_arrow.png'),
                  ),
                ),
              ),

            // ‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            if (_currentIndex < _imagePaths.length - 1)
              Positioned(
                top: context.screenHeight * 0.04,
                bottom: context.screenHeight * 0.04,
                right: context.screenWidth * 0.03,
                child: SizedBox(
                  width: context.screenWidth * 0.025,
                  child: CustomButton(
                    onTap: () => _handleArrowTap(_goNextImage),
                    child: Image.asset(
                        'assets/images/colorgame/quiz_color/dialog/right_arrow.png'),
                  ),
                ),
              ),

            // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î (X)
            if (_currentIndex == _imagePaths.length - 1)
              Positioned(
                top: context.screenHeight * -0.02,
                right: context.screenWidth * -0.01,
                child: GestureDetector(
                  onTap: () async {
                    await _slideController.reverse(); // üëà ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏•‡∏á
                    widget.onExit(); // üëà ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö overlay
                  },
                  child: Image.asset(
                    'assets/images/setting/exit.png',
                    width: 48,
                    height: 48,
                  ),
                ),
              ),

            if (_currentIndex == _imagePaths.length - 1)
              const HandGuide(
                angle: -0.5, // ‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏∑‡∏≠‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
                scale: 1.0,
                start: Offset(780, 0),
                end: Offset(790, 10),
                duration: Duration(milliseconds: 800),
              ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    final scale =
        min(screenSize.width / _designW, screenSize.height / _designH);

    return Padding(
      padding: const EdgeInsets.fromLTRB(300, 450, 100, 0),
      child: Center(
        child: SlideTransition(
          position: _slideAnimation,
          child: Transform.scale(
            scale: scale,
            alignment: Alignment.center,
            child: _buildFixedLayout(),
          ),
        ),
      ),
    );
  }
}
